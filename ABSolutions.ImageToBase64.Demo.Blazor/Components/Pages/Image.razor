@page "/image"
@using ABSolutions.ImageToBase64.BlazorComponent

@if (_doRender)
{
    <h1>Base64-encoded Embedded Image</h1>
    <p>The images below are Base64 encoded and embedded from a remote source. Go ahead and confirm this using your browser's Developer Tools!</p>
    <h2>Non-cached image</h2>
    <br/>
    <br/>
    <Base64Image Alt="Random image from upstream source" AriaHidden="true" Role="img" UseCache="false" Filename="500.webp" CancellationToken="CancellationToken"/>
    <br/>
    <br/>
    <hr/>
    <br/>
    <h2>Cached image</h2>
    <Base64Image Alt="Random image from upstream source" AriaHidden="true" Role="img" UseCache="true" Filename="500.webp" CancellationToken="CancellationToken"/>
}

@code {
    private bool _doRender;
    private readonly CancellationTokenSource _cancellationTokenSource = new();
    private CancellationToken CancellationToken => _cancellationTokenSource.Token;

    protected override async Task OnInitializedAsync()
    {
        // randomly cancel image retrieval 50% of the time to demonstrate cancellation token operation
        var random = new Random();
        if (random.Next(1, 100) % 2 == 0)
        {
            await _cancellationTokenSource.CancelAsync();
            Console.WriteLine("Image retrieval cancelled via random number generator.");
        }

        _doRender = true;
    }

}