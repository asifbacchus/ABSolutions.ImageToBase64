@using ABSolutions.ImageToBase64.Models
<!--suppress HtmlRequiredAltAttribute -->
@* ReSharper disable once MissingAltAttributeInImgTag *@
<img src="@_base64Image.Base64String" @attributes="@_imageAttributes"/>

@code {
    private Base64Result _base64Image;
    private readonly Dictionary<string, object> _imageAttributes = [];

    [Inject] private IBase64Converter Base64Converter { get; set; } = default!;

    [Parameter] public string? Filename { get; set; }
    [Parameter] public string? Alt { get; set; }
    [Parameter] public bool AriaHidden { get; set; } = true;
    [Parameter] public string AriaDescription { get; set; } = string.Empty;
    [Parameter] public string AriaLabel { get; set; } = string.Empty;
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public string Role { get; set; } = "img";
    [Parameter] public Dictionary<string, object> Attributes { get; set; } = [];

    [Parameter] public bool? UseCache { get; set; }
    [Parameter] public bool? NoExpiry { get; set; }

    [Parameter] public EventCallback<bool> Base64ImageChanged { get; set; }
    [Parameter] public string LogCorrelationValue { get; set; } = string.Empty;
    [Parameter] public CancellationToken CancellationToken { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _imageAttributes.Add("alt", string.IsNullOrEmpty(Alt) ? string.Empty : Alt);
        _imageAttributes.Add("aria-hidden", AriaHidden.ToString().ToLowerInvariant());
        _imageAttributes.Add("role", Role.ToLowerInvariant());
        if (!string.IsNullOrWhiteSpace(AriaDescription))
            _imageAttributes.Add("aria-description", AriaDescription);
        if (!string.IsNullOrWhiteSpace(AriaLabel))
            _imageAttributes.Add("aria-label", AriaLabel);
        if (!string.IsNullOrWhiteSpace(Class))
            _imageAttributes.Add("class", Class);

        // add user-supplied attributes iif they don't already exist
        foreach (var (key, value) in Attributes)
        {
            _imageAttributes.TryAdd(key, value);
        }

        _base64Image = await Base64Converter.GetImageAsBase64Async(Filename, UseCache, NoExpiry, LogCorrelationValue, CancellationToken);
        await Base64ImageChanged.InvokeAsync(!string.IsNullOrWhiteSpace(_base64Image.Base64String));
    }

}