<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="Library_Configuration-reference"
       title="Configuration reference"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">

    <link-summary>
        Explanation of configuration options for this library and their default settings.
    </link-summary>
    <card-summary>
        Detailed explanation of all configuration options for this library along with default settings.
    </card-summary>
    <web-summary>
        Configuration options for ABSolutions.ImageToBase64 .NET library.
    </web-summary>

    <chapter id="configuration-options" title="Configuration options">
        <p>
            All library configuration options are defined in <code>appsettings.json</code>. The following is a detailed
            explanation of each configuration option.
        </p>
        <warning>
            Configuration options
            <format style="bold">MUST</format>
            be in a key called <code>Base64Converter</code> or the library will not find your settings!
        </warning>
        <deflist collapsible="true">
            <def id="library-config-httpClientName" title="string:HttpClientName">
                <p>
                    Named HTTP client to use/create to retrieve upstream remote images for conversion.
                    <a href="Library_HTTP-client.md">[more info]</a>
                </p>
                <p>
                    <format style="bold">Default:</format>
                    Base64Converter
                </p>
            </def>
            <def id="library-config-upstreamImageAssetBaseUri" title="string:UpstreamImageAssetBaseUri">
                <p>
                    Upstream base URI from which to retrieve images.
                </p>
                <p>
                    If a file path is provided, images will be retrieved relative to this path. If a URL is provided,
                    images
                    will be retrieved relative to this URL. If specifying a URL, it MUST be an absolute URL. A trailing
                    slash will added to this value if not present.
                </p>
                <warning>
                    <p>
                        You MUST specify a protocol for this URI: <code>http://</code>, <code>https://</code> or <code>file://</code>.
                    </p>
                    <p>
                        If using <code>http</code> or <code>https</code>,
                        invalid URLs will throw a <code>UriFormatException</code>. If using <code>file</code>, a missing
                        or
                        invalid path will throw a <code>DirectoryNotFoundException</code>.
                    </p>
                </warning>
                <p>
                    <format style="bold">Default:</format>
                    http://localhost
                </p>
            </def>
            <def id="library-config-upstreamImageRetrievalTimeoutSeconds"
                 title="int:UpstreamImageRetrievalTimeoutSeconds">
                <p>
                    Timeout in seconds for upstream image retrieval. If this timeout is exceeded, an <code>OperationCancelledException</code>
                    with a <code>TimeoutException</code> inner exception will be thrown.
                </p>
                <p>
                    <format style="bold">Default:</format>
                    5
                </p>
            </def>
            <def id="library-config-enableBase64Cache" title="bool:EnableBase64Cache">
                <p>
                    Whether to enable the in-memory cache of Base64 strings. When enabled, Base64 strings for a given
                    file name will be retrieved from the cache so long as the they have not expired. If the cache is
                    disabled, the upstream source will be queried for each request.
                </p>
                <p>
                    <format style="bold">Default:</format>
                    <code>true</code>
                </p>
            </def>
            <def id="library-config-noExpiry" title="bool:NoExpiry">
                <p>
                    Whether to set cached entries to never expire. If this is enabled, images will only be retrieved
                    from the upstream source once and then served from the cache until your program is restarted.
                </p>
                <p>
                    <format style="bold">Default:</format>
                    <code>false</code>
                </p>
            </def>
            <def id="library-config-base64CacheExpiryMinutes" title="int:Base64CacheExpiryMinutes">
                <p>
                    Number of minutes before base64 cache entries expire. Base64 strings in the cache will not be served
                    from the cache once this time has elapsed. Please note that cached entries are "refreshed" each time
                    they are accessed.
                </p>
                <p>
                    <format style="bold">Default:</format>
                    1440 (1 day)
                </p>
            </def>
        </deflist>
        <tip>
            <code>EnableBase64Cache</code> and <code>NoExpiry</code> can be overriden on a per-call basis. Please see
            <a href="Library_Calling-the-library.md"/> for more information.
        </tip>
    </chapter>

    <chapter id="configuration-example" title="Configuration example">
        <code-block lang="json" src="Library_appsettings.json"/>
    </chapter>

    <chapter id="configuration-bind-model" title="Configuration bind-model">
        <p>In the event you need to read the configuration options, you can access them via dependency injection using
            the
            <emphasis>options
                pattern
            </emphasis>
            . Inject <code>IOptions&lt;Base64ConverterConfiguration&gt;</code> into your class, something like this:
        </p>

        <code-block lang="c#">
            public class MyService
            {
            private readonly Base64ConverterConfiguration _config;

            public MyService(IOptions&lt;Base64ConverterConfiguration&gt; config)
            {
            _config = config.Value;
            }
            }
        </code-block>
    </chapter>

</topic>